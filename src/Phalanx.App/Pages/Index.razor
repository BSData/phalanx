@page "/"
@using Microsoft.Extensions.Options
@using WarHub.ArmoryModel.DataProviders
@inject GalleryHttpClient httpClient
@inject IOptions<GalleryBrowserOptions> options
@inject GalleryBrowserState state

<FluentSelect @bind-Value="selectedGalleryName">
    <FluentOption>Use Playground</FluentOption>

    @foreach (var galleryRef in state.Cache.GalleryReferences)
    {
        <FluentOption Value="galleryRef.Name">@galleryRef.Name</FluentOption>
    }

</FluentSelect>
<Phalanx.App.Pages.Configuration.SystemSelect @bind-CatpkgGallery=SelectedGalleryCache></Phalanx.App.Pages.Configuration.SystemSelect>

<Phalanx.App.Pages.Home.WelcomeView></Phalanx.App.Pages.Home.WelcomeView>

<div style="display: flex; justify-content: space-around;">
    <FluentAnchor Appearance="Appearance.Accent" Href="/rosteredit">Edit sample roster</FluentAnchor>
    <FluentAnchor Appearance="Appearance.Accent" Href="/print">Format roster</FluentAnchor>
</div>

@code {

    private string selectedGalleryName = "";

    private CatpkgGalleryCache? SelectedGalleryCache
    {
        get => selectedGalleryName == "" ? new CatpkgGalleryCache(new GalleryReference("Phalanx Playground", new Uri("file://"))) :
            state.Cache[selectedGalleryName];
        set
        {
            if (value is not null)
            {
                state.Cache.Upsert(value);
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

    // add if not already existing
        foreach (var galleryRefDto in options.Value.DefaultGalleries)
        {
            var galleryRef = galleryRefDto.ToRecord();
            if (state.Cache[galleryRef] is null)
            {
                state.Cache.Upsert(new(galleryRef));
            }
        }
        selectedGalleryName = options.Value.DefaultGalleries.FirstOrDefault()?.Name ?? "";
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        foreach (var galleryRef in options.Value.DefaultGalleries)
        {
            var galleryInfo = await state.Cache.GetCatpkgGalleryInfoAsync(httpClient, galleryRef.ToRecord());
        }
    }

}