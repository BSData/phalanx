@using WarHub.ArmouryModel.DataProviders

@inject GalleryHttpClient client
@inject GalleryBrowserState state


<FluentCard class="my-3">
    <div class="gallery-item">
        @if (CachedRepo is { } repository)
        {
            <div class="game-system-info-container">
                <h2 class="game-system-title">@repository.Description</h2>
                <span class="remote-version">@repository.Version</span>
                <span class="remote-version-release-date">@repository.LastUpdated</span>
                @if (repository.Archived ?? false)
                {
                    <span class="remote-version-archived">Archived</span>
                }

            </div>

            <div class="gallery-item-button-container">
                @*
                    TODO: Dynamically enable/disable repos based on status
                    - Repos loaded into memory and are up to date have pull and update disabled
                    - Repos loaded into memory, but are not up to date have pull disabled
                    - Repos not loaded into memory have remove and update disabled

                    span.local-version only shows if the repo is loaded into memory
                *@
                <FluentButton class="mx-1 mb-1" @onclick="HydrateCat" Disabled="HasFiles">
                    <FluentIcon Icon="@(Icons.Filled.Size16.Save)" Slot="start" />
                    Pull
                </FluentButton>
                <FluentButton class="mx-1 mb-1" Disabled="true">
                    <FluentIcon Icon="@(Icons.Filled.Size16.ArrowUp)" Slot="start" />
                    Update
                </FluentButton>
                <FluentButton class="mx-1 mb-1" Disabled="!HasFiles">
                    <FluentIcon Icon="@(Icons.Filled.Size16.Delete)" Slot="start" />
                    Remove
                </FluentButton>
            </div>
            @* TODO: Show local version when repo is loaded into memory *@

            @if (HasFiles)
            {
                <p>File List Loaded</p>
            }
            @* <span class="local-version">Local Version: 2.0</span> *@
        }
    </div>
</FluentCard>

@code {
    [Parameter, EditorRequired]
    public CatpkgRepositoryInfo? Repository { get; set; }

    [Parameter, EditorRequired]
    public CatpkgGalleryCache? CatpkgGallery { get; set; }

    private bool HasFiles => hydratedRepo?.RepositoryFiles is { };

    private CatpkgRepositoryInfo? hydratedRepo;

    private CatpkgRepositoryInfo? CachedRepo => hydratedRepo ?? Repository;

    async Task HydrateCat()
    {
        if (hydratedRepo is null && Repository?.Name is { } name && CatpkgGallery is { Reference: { } catpkgRef })
        {
            var repoRef = new RepositoryReference(name, catpkgRef);
            hydratedRepo = await state.Cache.GetHydratedCatpkgAsync(client, repoRef);
        }
    }
}
