@using WarHub.ArmouryModel.EditorServices
@using WarHub.ArmouryModel.Source

@if (Roster is not null)
{
    <TitlePart>@Roster.Name</TitlePart>

    <h2>@Roster.Name</h2>
    @* Total Roster Costs *@
    <p>
        @foreach (var cost in Roster.Costs)
        {
            if (Roster.CostLimits.FirstOrDefault(x => x.TypeId == cost.TypeId) is { } limit)
            {
                <span>@cost.Value / @limit.Value @cost.Name</span>
            }
            else
            {
                <span>@cost.Value @cost.Name</span>
            }
            if (cost != Roster.Costs[^1])
            {
                <span>, </span>
            }
        }
    </p>
    @* TODO make this a fab or etc *@
    @if(!AddMode){
        <TitlePart>Add Units</TitlePart>

        <FluentTreeView>
            @foreach (var force in Roster.Forces)
            {
                <FluentTreeItem Expanded="true">
                    <span>@force.Name</span>

                    @foreach (var category in force.Categories)
                    {
                        <FluentTreeItem Expanded="true">
                            <span>@category.Name</span>

                            @foreach (var selections in force.Selections
                                .Where(sel => sel.Categories.Any(x => x.Primary && x.EntryId == category.EntryId)))
                            {
                                <FluentTreeItem Expanded="true">
                                    <SelectionDisplay Selection="selections" OnRosterEdit="OnRosterEdit" />
                                </FluentTreeItem>
                            }
                        </FluentTreeItem>
                    }
                    @* TODO kludge for now *@
                    @foreach (var selections in force.Selections
                        .Where(sel => sel.Categories.Count() < 1))
                    {
                        <FluentTreeItem Expanded="true">
                            <SelectionDisplay Selection="selections" OnRosterEdit="OnRosterEdit" />
                        </FluentTreeItem>
                    }
                </FluentTreeItem>
            }
        </FluentTreeView>
        
        <FluentButton Appearance="Appearance.Accent" @onclick="ToggleAdd">Add Units</FluentButton>


    }
    else{
        <RosterAddMenu Roster="Roster" Editor="Editor" OnAddDone="CloseAddMenu" ></RosterAddMenu>
    }

}

@code {
    
    [Parameter, EditorRequired]
    public RosterEditor? Editor { get; set; }
    // TODO pretty sure Roster lives int eh

    [Parameter, EditorRequired]
    public RosterNode? Roster { get; set; }

    private bool AddMode {get; set; } = false;

    private void ToggleAdd(){
        this.AddMode = !this.AddMode;
    }

    [Parameter, EditorRequired]
    public EventCallback<IRosterOperation[]> OnRosterEdit { get; set; }

    public Task CloseAddMenu(IRosterOperation[] ops){
        ToggleAdd();
        Console.WriteLine("Invoking at ETRI");

        return OnRosterEdit.InvokeAsync(ops);


    }
}
