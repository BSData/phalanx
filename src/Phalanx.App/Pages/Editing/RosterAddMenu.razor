@using WarHub.ArmouryModel
@using WarHub.ArmouryModel.EditorServices


@if (Editor is { State: { Roster: { } Roster, Catalogues: { } Catalogues } })
{
    @* TODO this render fires every time an add count gets modified
        fine for testing for now, but might expensive with bigger gamesystems *@
    <TitlePart>Add Units</TitlePart>

    <FluentTreeView>
        @foreach (var forceOpts in Forces)
        {
            <FluentTreeItem Expanded=true>
                <h3>@forceOpts.Force.Name</h3>
                @foreach (var categoryOpts in forceOpts.Categories)
                {
                    <FluentTreeItem Expanded=true>
                        <h3>@categoryOpts.Category.Name</h3>
                        @foreach (var selectionOpts in categoryOpts.Selections)
                        {
                            <FluentTreeItem Expanded="true">
                                <div style="display: flex; gap: 1em;">
                                    <FluentNumberField TValue="int" @bind-Value="selectionOpts.Count" Min="0" Size="2" />
                                    <span>@selectionOpts.Entry.Name</span>
                                    <CostDisplay Values="selectionOpts.Entry.Costs" />
                                </div>
                            </FluentTreeItem>
                        }
                    </FluentTreeItem>
                }
            </FluentTreeItem>
        }
    </FluentTreeView>
    <FluentButton Appearance="Appearance.Accent" @onclick=AddSelected>Add</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick=OnAddDone>Cancel</FluentButton>
}

@code {
    [CascadingParameter, EditorRequired]
    public RosterEditor? Editor { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnAddDone { get; set; }

    private List<ForceOptions> Forces { get; set; } = new();

    record AddSelection(ISelectionEntryContainerSymbol Entry, IForceSymbol Force)
    {
        public int Count { get; set; }
    }

    record ForceOptions(IForceSymbol Force)
    {
        public List<CategoryOptions> Categories { get; } = new();
    }

    record CategoryOptions(ICategoryEntrySymbol Category)
    {
        public List<AddSelection> Selections { get; } = new();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Forces.Clear();
        if (Editor is { State: { RosterSymbol: { } Roster } })
        {
            foreach (var force in Roster.Forces)
            {
                var forceOpts = new ForceOptions(force);
                foreach (var category in force.SourceEntry.Categories)
                {
                    var categoryOpts = new CategoryOptions(category);
                    var categoryId = category.ReferencedEntry!.Id!;
                    // TODO include entries from imported catalogues + game system
                    // TODO handle No Category entries
                    foreach (var entry in force.CatalogueReference.Catalogue.RootContainerEntries)
                    {
                        if (entry.ContainerKind is ContainerKind.Selection &&
                        entry is ISelectionEntryContainerSymbol selectionEntry &&
                        (selectionEntry.PrimaryCategory?.ReferencedEntry?.Id == categoryId ||
                        selectionEntry.IsReference && selectionEntry.ReferencedEntry!.PrimaryCategory?.ReferencedEntry?.Id == categoryId))
                        {
                            categoryOpts.Selections.Add(new(selectionEntry, force));
                        }
                    }
                    forceOpts.Categories.Add(categoryOpts);
                }
                Forces.Add(forceOpts);
            }
        }
    }

    Task AddSelected()
    {
        if (Editor is { } editor)
        {
            foreach (var forceOpts in Forces)
            {
                foreach (var categoryOpts in forceOpts.Categories)
                {
                    foreach (var selectionOpts in categoryOpts.Selections)
                    {
                        if (selectionOpts.Count > 0)
                        {
                            AddSelectionOp(editor, selectionOpts);
                        }
                    }
                }
            }
        }
        return OnAddDone.InvokeAsync();
    }

    static void AddSelectionOp(RosterEditor editor, AddSelection opts)
    {
        editor.ApplyOperation(RosterOperations.AddRootEntryFromSymbol(opts.Entry, opts.Force.Id!, opts.Count));
    }
}
