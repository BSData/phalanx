@using WarHub.ArmouryModel
@using WarHub.ArmouryModel.EditorServices

@if (Selection is not null)
{
    <div style="display: flex; gap: 1em;">

        <span>@Selection.Name</span>

        <CostDisplay Values="Selection.Costs" />

        <FluentButton @onclick=RemoveSelf>Remove</FluentButton>
    </div>

    @* TODO this is where a step should be taken back to figure out how to recurse our selections/editing/etc *@
    <div style="display:flex; flex-direction:column">
        @foreach (var selEntry in Selection.SourceEntry.ChildSelectionEntries)
        {
            //var catalogues = Editor.State.Compilation.GlobalNamespace.Catalogues.Where(x => !x.IsGamesystem);

            <span>@selEntry.Name</span>
        }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public ISelectionSymbol? Selection { get; set; }

    [Parameter]
    public EventCallback<ISelectionSymbol> SelectionClosed { get; set; }

    [CascadingParameter]
    public RosterEditor? Editor { get; set; }

    async Task RemoveSelf()
    {
        if (Selection is null)
            return;
        Editor?.ApplyOperation(RosterOperations.RemoveSelection(Selection.GetDeclaration()!));
        await SelectionClosed.InvokeAsync(Selection);
    }
}