@page "/rosteredit"

@using Phalanx.App.Pages.Editing
@using WarHub.ArmouryModel.EditorServices
@using WarHub.ArmouryModel.EditorServices.Formatting

@implements IDisposable

@inject Phalanx.App.Pages.Printing.RosterFormatsProvider formatter
@inject Phalanx.App.Util.RosterEditorService EditorService

@if (Editor?.State.Roster is { } roster)
{
    <TitlePart>@roster.Name</TitlePart>
    <CascadingValue Value="@Editor">
        <FluentTabs>
            <FluentTab Label="Edit">
                <RootRosterEdit />
            </FluentTab>
            <FluentTab Label="Options">
                <RosterOptions />
            </FluentTab>
            <FluentTab Label="Preview">
                <FluentSelect Items=formatter.Formats @bind-SelectedOption=@Format OptionText="@(x => x.Name)" />

                <Phalanx.App.Pages.Printing.RosterPreviewer RosterNode=roster Format=Format />
            </FluentTab>
        </FluentTabs>
    </CascadingValue>
}
else
{
    <span>No roster selected</span>
}

@code {
    public RosterEditor? Editor => EditorService.ActiveEditor;

    public RosterFormat Format { get; set; } = RosterFormatter.BuiltinFormatters[0];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Editor is null)
        {
            EditorService.LoadSampleRoster();
        }
        if (Editor is not null)
        {
            Editor.OperationApplied += (op, state) => StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (Editor is { } editor)
            editor.OperationApplied -= (op, state) => StateHasChanged();
    }
}
