@page "/rosteredit"
@using Phalanx.SampleDataset
@using WarHub.ArmouryModel.EditorServices
@using WarHub.ArmouryModel.Source

@if (Roster is not null)
{
    <TitlePart>@Roster.Name</TitlePart>

    <h2>@Roster.Name</h2>
    <p>
        @foreach (var cost in Roster.Costs)
        {
            if (Roster.CostLimits.FirstOrDefault(x => x.TypeId == cost.TypeId) is { } limit)
            {
                <span>@cost.Value / @limit.Value @cost.Name</span>
            }
            else
            {
                <span>@cost.Value @cost.Name</span>
            }
            if (cost != Roster.Costs[^1])
            {
                <span>, </span>
            }
        }
    </p>
    <FluentTreeView>
        @foreach (var force in Roster.Forces)
        {
            <FluentTreeItem Expanded="true">
                <span>@force.Name</span>
                @foreach (var category in force.Categories)
                {
                    <FluentTreeItem Expanded="true">
                        <span>@category.Name</span>
                        @foreach (var selection in force.Selections.Where(sel => sel.Categories.Any(x => x.Primary && x.EntryId ==
                       category.EntryId)))
                        {
                            <FluentTreeItem Expanded="true">
                                <span>@selection.Name</span>
                            </FluentTreeItem>
                        }
                    </FluentTreeItem>
                }
            </FluentTreeItem>
        }
    </FluentTreeView>
}

@code {
    [Parameter]
    public RosterEditor? Editor { get; set; }

    private RosterNode? Roster => Editor?.State.Roster;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadTestRoster();
    }

    void LoadTestRoster()
    {
        //get roster from file
        var ws = SampleDataResources.CreateXmlWorkspace();
        var rosterState = RosterState.CreateFromNodes(ws.Documents.Select(x => x.GetRootAsync().Result!));
        Editor = new RosterEditor(rosterState);
    }
}
