@page "/rosteredit"

@using Phalanx.SampleDataset
@using WarHub.ArmouryModel.EditorServices
@using WarHub.ArmouryModel.EditorServices.Formatting
@using WarHub.ArmouryModel.Source
@using Phalanx.App.Pages.Editing

@inject Phalanx.App.Pages.Printing.RosterFormatsProvider formatter

@if (Roster is not null)
{
    <TitlePart>@Roster.Name</TitlePart>
    <CascadingValue Value="@Editor">
        <CascadingValue Value="@OnRosterEdit" IsFixed="true">
        <FluentTabs>
            <FluentTab>Edit</FluentTab>
            <FluentTabPanel>
                @* TODO the editor should be injected rather than passed all over the place *@
                    <EditTreeRosterItem/>
            </FluentTabPanel>
            <FluentTab>Options</FluentTab>
            <FluentTabPanel>
                <div>IOU - 1 functional page</div>
                <br/>
                <div>Roster Name edit</div>
                <br/>
                <div>Roster's Limits for costs and etc or whatever node decoration indicates that</div>
                <br/>
                <div>Notes:</div>
                <br/>
                <div>Edit Roster Forces Menu:</div>


            </FluentTabPanel>
            <FluentTab>Preview</FluentTab>
            <FluentTabPanel>

                <div>
                    <ListSelect @bind-Value="Format" Items="formatter.Formats">
                        @context.Name
                    </ListSelect>
                </div>

                <Phalanx.App.Pages.Printing.RosterPreviewer RosterNode="Roster" Format="Format" />
            </FluentTabPanel>
        </FluentTabs>
        </CascadingValue>
    </CascadingValue>

}
else
{
    <span>No roster selected</span>
}

@code {
    public RosterEditor? Editor { get; set; }

    public RosterFormat Format { get; set; } = RosterFormatter.BuiltinFormatters[0];

    private RosterNode? Roster => Editor?.State.Roster;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadTestRoster();
    }
    void LoadTestRoster()
    {
        //get roster from file
        var ws = SampleDataResources.CreateXmlWorkspace();
        var rosterState = RosterState.CreateFromNodes(ws.Documents.Select(x => x.GetRootAsync().Result!));
        Editor = new RosterEditor(rosterState);
    }

    void OnRosterEdit(IRosterOperation[] operations)
    {
        Console.WriteLine("Calling apply at RosterEdit");

        @* foreach(IRosterOperation op in operations)
            Editor?.ApplyOperation(op); *@

        var printer = new Phalanx.App.RosterDebugPrinter();
        printer.Visit(Editor?.State.Roster);
        @* printer.Visit(Roster); *@


        StateHasChanged();
    }



private void RefreshMe()
{
    StateHasChanged();
}
}
