@using Microsoft.Extensions.Options
@using WarHub.ArmoryModel.DataProviders
@using WarHub.ArmouryModel.Workspaces.BattleScribe;

@inject GalleryHttpClient client
@inject GalleryBrowserState state

@if (CatpkgGallery is { InfoCache: { } galleryInfo } && _repositories is not null)
{
    <h2>System:</h2>
    <FluentSelect TValue=string Value="_selectedRepoName" ValueChanged="(x => SelectCatpkg(x))">
        @foreach (var repo in _repositories)
        {
            <FluentOption Value="repo.Name">@repo.Name</FluentOption>
        }
    </FluentSelect>
    <FluentCheckbox @bind-Value="ShowArchived">
        Show Archived Repositories
    </FluentCheckbox>
}
else
{
    <FluentProgressRing/>
    <p>Loading catpkg gallery...</p>
}

@code {

        [Parameter]
        public CatpkgGalleryCache? CatpkgGallery { get; set; }

        [Parameter]
        public EventCallback<CatpkgGalleryCache> CatpkgGalleryChanged { get; set; }

        XmlWorkspace? workspace;

        string _selectedRepoName = "";

        bool _showArchived;

        bool ShowArchived
    {
            get => _showArchived;
            set
    {
                _showArchived = value;
                UpdateRepositories();
            }
        }

        List<CatpkgRepositoryInfo>? _repositories;

        List<ColumnDefinition<CatpkgRepositoryInfo>> ColumnDefinitions { get; } = new()
    {
#nullable disable
        new("Name", x => x.Description),
        new("Latest Release", x => x.Version),
#nullable restore
    };

        void UpdateRepositories()
        {
            _repositories = CatpkgGallery?.InfoCache?.Repositories
                ?.Where(x => x.Archived != true || ShowArchived)
                .OrderBy(x => x.Description)
                .ToList()
                            ?? new();
            // Clear value if we switch away from archived
            if ((CatpkgGallery?.InfoCache?.Repositories
                ?.Where(x => x.Description == _selectedRepoName)
                .FirstOrDefault()?.Archived ?? false) && !ShowArchived)
            {
                _selectedRepoName = "";
            }
        }

        CatpkgRepositoryInfo? repositoryInfo;

        async Task SelectCatpkg(string catName)
        {
            _selectedRepoName = catName;
            repositoryInfo = CatpkgGallery?.InfoCache?.Repositories.Find(x => x.Name == catName);
            repositoryInfo = await state.Cache.GetHydratedCatpkgAsync(client, new RepositoryReference(_selectedRepoName, CatpkgGallery.Reference));
            workspace = await state.Cache.GetXMLWorkspaceAsync(client, new RepositoryReference(_selectedRepoName, CatpkgGallery.Reference));
            Console.WriteLine(workspace);
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (CatpkgGallery is { Reference: { } galleryRef, InfoCache: null })
        {
            var result = await state.Cache.GetHydratedCatpkgGalleryCacheAsync(client, galleryRef);
            await CatpkgGalleryChanged.InvokeAsync(result);
        }
        UpdateRepositories();
    }

}