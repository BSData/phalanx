@using WarHub.ArmouryModel.EditorServices.Formatting

<label>
    Name
    <fast-text-field placeholder="name" current-value="@Format.Name" @onchange="OnTemplateNameChanged"
        disabled="@Readonly">
    </fast-text-field>
</label>
<label>
    Output type
    <fast-select current-value="@Format.OutputFormat" @onchange="OnTemplateOutputFormatChanged" disabled="@Readonly">
        @foreach (var item in Enum.GetValues<OutputFormat>())
        {
            <fast-option value="@item">@item</fast-option>
        }
    </fast-select>
</label>
<label>
    Format method
    <fast-select current-value="@Format.Method" @onchange="OnTemplateFormatMethodChanged" disabled="@Readonly">
        @foreach (var item in Enum.GetValues<FormatMethod>())
        {
            <fast-option value="@item">@item</fast-option>
        }
    </fast-select>
</label>
<fast-text-area value="@Format.Template" current-value="@Format.Template" @onchange="OnTemplateContentChanged"
    resize="vertical" rows="50" disabled="@Readonly">
</fast-text-area>

@code {
    [Parameter]
    public RosterFormat Format { get; set; } = new();

    [Parameter]
    public EventCallback<RosterFormat> FormatChanged { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    Task OnTemplateNameChanged(ChangeEventArgs e)
    {
        return FormatChanged.InvokeAsync(Format with { Name = e.Value?.ToString() });
    }

    Task OnTemplateOutputFormatChanged(ChangeEventArgs e)
    {
        return Enum.TryParse<OutputFormat>(e.Value?.ToString(), out var result)
        ? FormatChanged.InvokeAsync(Format with { OutputFormat = result })
        : Task.CompletedTask;
    }

    Task OnTemplateFormatMethodChanged(ChangeEventArgs e)
    {
        return Enum.TryParse<FormatMethod>(e.Value?.ToString(), out var result)
        ? FormatChanged.InvokeAsync(Format with { Method = result })
        : Task.CompletedTask;
    }

    Task OnTemplateContentChanged(ChangeEventArgs e)
    {
        return FormatChanged.InvokeAsync(Format with { Template = e.Value?.ToString() });
    }
}