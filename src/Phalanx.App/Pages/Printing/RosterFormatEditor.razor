@using WarHub.ArmouryModel.EditorServices.Formatting

<label>
    Name
    <FluentTextField Placeholder="name" @bind-Value="Name" Disabled="Readonly" />
</label>
<label>
    Output type
    <FluentSelect @bind-Value="OutputFormat" Disabled="Readonly">
        @foreach (var item in Enum.GetValues<OutputFormat>())
        {
            <FluentOption Value="@item">@item</FluentOption>
        }
    </FluentSelect>
</label>
<label>
    Format method
    <FluentSelect @bind-Value="Method" Disabled="Readonly">
        @foreach (var item in Enum.GetValues<FormatMethod>())
        {
            <FluentOption Value="@item">@item</FluentOption>
        }
    </FluentSelect>
</label>
<FluentTextArea @bind-Value="Template" Resize="Resize.Vertical" rows="50" Disabled="Readonly" />

    @code {
    [Parameter]
    public RosterFormat Format { get; set; } = new();

    [Parameter]
    public EventCallback<RosterFormat> FormatChanged { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    string? Name
    {
        get => Format.Name;
        set => FormatChanged.InvokeAsync(Format with { Name = value });
    }

    OutputFormat OutputFormat
    {
        get => Format.OutputFormat;
        set => FormatChanged.InvokeAsync(Format with { OutputFormat = value });
    }

    FormatMethod Method
    {
        get => Format.Method;
        set => FormatChanged.InvokeAsync(Format with { Method = value });
    }

    string? Template
    {
        get => Format.Template;
        set => FormatChanged.InvokeAsync(Format with { Template = value });
    }
}