@page "/print"
@using Phalanx.App.Pages.Printing
@using SampleDataset
@using WarHub.ArmouryModel.EditorServices.Formatting
@using WarHub.ArmouryModel.Source
@using WarHub.ArmouryModel.Workspaces.BattleScribe

@inject Printing.RosterFormatsProvider formatter


<h1>Format roster</h1>

<div class="card-container">
    <FluentCard class="pcard">
        <form>
            <fieldset>
                <legend>Roster file</legend>
                <label>
                    Select roster file (.ros, .rosz)
                    <InputFile OnChange="LoadRosterFile" accept=".ros, .rosz" />
                </label>

                <p>
                    <strong>
                        Loaded:
                        @if (RosterNode is null)
                        {
                            <span>none</span>
                        }
                        else
                        {
                            <span>@RosterNode.Name</span>
                        }
                    </strong>
                </p>
            </fieldset>
            <fieldset>
                <legend>Formatter</legend>
                <label>
                    Select preset
                    <FluentSelect @bind-Value="@SelectedFormatIndex">
                        @foreach (var (format, index) in formatter.Formats.Select((x, i) => (x, i)))
                            {
                                <FluentOption Value="@index">@format.Name</FluentOption>
                            }
                        </FluentSelect>
                    </label>
                    <FluentCheckbox @bind-Value="isCustomFormat">
                        Edit
                    </FluentCheckbox>
                    @if (selectedFormat is not null)
                {
                    <RosterFormatEditor @bind-Format=selectedFormat Readonly="!isCustomFormat" />
                }
            </fieldset>
        </form>
    </FluentCard>

    <FluentCard class="pcard">
        <h3>Formatted output</h3>
        @if (selectedFormat is not null && RosterNode is not null)
        {
            var formattedOutput = RosterFormatter.Format(RosterNode, selectedFormat);
            <FluentTabs class="output-tabs">
                <FluentTab>Preview</FluentTab>
                <FluentTabPanel slot="tabpanel">
                    @if (selectedFormat?.OutputFormat == OutputFormat.Html)
                    {
                        <iframe srcdoc="@formattedOutput" class="html-renderer">
                        </iframe>
                    }
                    else
                    {
                        <pre>@formattedOutput</pre>
                    }
                </FluentTabPanel>
                <FluentTab>Raw text</FluentTab>
                <FluentTabPanel slot="tabpanel">
                    <pre>@formattedOutput</pre>
                </FluentTabPanel>
            </FluentTabs>
        }
    </FluentCard>
</div>

@code {
    private RosterNode? RosterNode;
    private RosterFormat? selectedFormat;
    private bool isCustomFormat = true;
    private string? selectedFormatIndex;
    private string? SelectedFormatIndex
    {
        get => selectedFormatIndex;
        set
        {
            selectedFormatIndex = value;
            selectedFormat = int.TryParse(value, out var i)
            ? formatter.Formats.ElementAtOrDefault(i)
            : null;
        }
    }

    // TODO copy-to-clipboard for outputs
    // TODO save file for outputs

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        selectedFormat = formatter.Formats.FirstOrDefault();
        var rosterFile = SampleDataResources.CreateXmlWorkspace().DocumentsByKind[XmlDocumentKind.Roster][0];
        RosterNode = (RosterNode?)(await rosterFile.GetRootAsync());
    }

    void OnFormatIndexSelected(ChangeEventArgs e)
    {
        SelectedFormatIndex = e.Value?.ToString();
    }

    async Task LoadRosterFile(InputFileChangeEventArgs eventArgs)
    {
        // 10MB
        const long maxSize = 10 << 10 << 10;
        using var stream = eventArgs.File.OpenReadStream(maxAllowedSize: maxSize);
        // it's bad but WHAM doesn't support async reading currently :(
        // TODO fix when wham gains async support, consider migrating?
        using var memStream = new MemoryStream();
        await stream.CopyToAsync(memStream);
        memStream.Position = 0;
        RosterNode = (RosterNode)await memStream.LoadSourceAuto(eventArgs.File.Name).GetDataOrThrowAsync<RosterNode>();
    }
}
