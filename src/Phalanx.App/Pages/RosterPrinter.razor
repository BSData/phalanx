@page "/print"
@using Phalanx.App.Pages.Printing
@using SampleDataset
@using WarHub.ArmouryModel.EditorServices.Formatting
@using WarHub.ArmouryModel.Source
@using WarHub.ArmouryModel.Workspaces.BattleScribe

@inject Printing.RosterFormatsProvider formatter


<h1>Format roster</h1>

<div class="card-container">
    <fast-card>
        <fieldset>
            <legend>Roster file</legend>
            <label>
                Select roster file (.ros, .rosz)
                <InputFile OnChange="LoadRosterFile" accept=".ros, .rosz" />
            </label>

            <p>
                <strong>
                    Loaded:
                    @if (RosterNode is null)
                    {
                        <span>none</span>
                    }
                    else
                    {
                        <span>@RosterNode.Name</span>
                    }
                </strong>
            </p>
        </fieldset>
        <fieldset>
            <legend>Formatter</legend>
            <label>
                Select preset
                <fast-select current-value="@SelectedFormatIndex" @onchange="OnFormatIndexSelected">
                    @foreach (var (format, index) in formatter.Formats.Select((x, i) => (x, i)))
                    {
                        <fast-option value="@index">@format.Name</fast-option>
                    }
                </fast-select>
            </label>
            <fast-checkbox current-checked="@isCustomFormat.ToString()"
                @onchange="e => isCustomFormat = !isCustomFormat">
                Edit
            </fast-checkbox>
            @if (selectedFormat is not null)
            {
                <RosterFormatEditor @bind-Format=selectedFormat Readonly="!isCustomFormat"></RosterFormatEditor>
            }
        </fieldset>
    </fast-card>

    <fast-card>
        <h3 class="flex-no-grow">Formatted output</h3>
        @if (selectedFormat is not null && RosterNode is not null)
        {
            var formattedOutput = RosterFormatter.Format(RosterNode, selectedFormat);
            <fast-tabs class="flex-auto">
                <fast-tab>Preview</fast-tab>
                <fast-tab-panel slot="tabpanel">
                    @if (selectedFormat?.OutputFormat == OutputFormat.Html)
                    {
                        <iframe class="flex-auto output-frame" srcdoc="@formattedOutput">
                        </iframe>
                    }
                    else
                    {
                        <pre class="flex-auto">@formattedOutput</pre>
                    }
                </fast-tab-panel>
                <fast-tab>Raw text</fast-tab>
                <fast-tab-panel slot="tabpanel">
                    <pre class="flex-auto">@formattedOutput</pre>
                </fast-tab-panel>
            </fast-tabs>
        }
    </fast-card>
</div>

@code {
    private RosterNode? RosterNode;
    private RosterFormat? selectedFormat;
    private bool isCustomFormat = true;
    private string? selectedFormatIndex;
    private string? SelectedFormatIndex
    {
        get => selectedFormatIndex;
        set
        {
            selectedFormatIndex = value;
            selectedFormat = int.TryParse(value, out var i)
            ? formatter.Formats.ElementAtOrDefault(i)
            : null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        selectedFormat = formatter.Formats.FirstOrDefault();
        var rosterFile = SampleDataResources.CreateXmlWorkspace().DocumentsByKind[XmlDocumentKind.Roster][0];
        RosterNode = (RosterNode?)(await rosterFile.GetRootAsync());
    }

    void OnFormatIndexSelected(ChangeEventArgs e)
    {
        SelectedFormatIndex = e.Value?.ToString();
    }

    async Task LoadRosterFile(InputFileChangeEventArgs eventArgs)
    {
        // 10MB
        const long maxSize = 10 << 10 << 10;
        using var stream = eventArgs.File.OpenReadStream(maxAllowedSize: maxSize);
        // it's bad but WHAM doesn't support async reading currently :(
        // TODO fix when wham gains async support, consider migrating?
        using var memStream = new MemoryStream();
        await stream.CopyToAsync(memStream);
        memStream.Position = 0;
        RosterNode = (RosterNode)await memStream.LoadSourceAuto(eventArgs.File.Name).GetDataOrThrowAsync<RosterNode>();
    }
}
